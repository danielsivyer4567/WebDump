$(document).ready(function () { window.Parsley.addValidator('phone', { requirementType: 'string', validateString: function (value, requirement) { var pattern = new RegExp(/^[\+]?[\(]?\d{3}[\)]?[-. ]?\d{3}[-. ]?\d{4}$/); return pattern.test(value); }, messages: { en: 'Invalid phone number.' } }); window.Parsley.addValidator('password', { requirementType: 'string', validateString: function (value, requirement) { return /\d+/.test(value); }, messages: { en: 'The value should have at least one digit' } }); window.Parsley.addValidator('card_number', { requirementType: 'number', validateString: function (value, requirement) { return $.payment.validateCardNumber($('.cc-number').val()); }, messages: { en: 'Invalid card number' } }); window.Parsley.addValidator('card_exp', { requirementType: 'number', validateString: function (value, requirement) { return $.payment.validateCardExpiry($('.cc-exp').payment('cardExpiryVal')); }, messages: { en: 'Invalid expiration date' } }); window.Parsley.addValidator('card_cvc', { requirementType: 'number', validateString: function (value, requirement) { var cardType = $.payment.cardType($('.cc-number').val()); return $.payment.validateCardCVC($('.cc-cvc').val(), cardType); }, messages: { en: 'Invalid cvc number' } }); window.Parsley.addValidator('emails', { requirementType: 'string', validateString: function (value, requirement) { var oldEmail = $(".profile-form").text(); return oldEmail !== value; }, messages: { en: 'This is the same as the old e-mail address. Please enter a new e-mail address.' } }); }); var isMobile = false, mobileMaxWidth = 991; $(document).ready(function () { initUserMenu(); initMainMenu(); initSubMenu(); initAccordion(); }); var initMainMenu = function () {
    $(".menu-trigger").click(function () { $(".main-menu-list").toggle(); }); $(document).on('click', function (e) {
        if (!$(e.target).closest(".menu-trigger").length && $(window).width() < 991) { $(".main-menu-list").hide(); }
        e.stopPropagation();
    }); $(window).resize(function () { if ($(window).width() > 991) { $(".main-menu-list").removeAttr("style"); } });
}; var initSubMenu = function () { var $dropdownLink = $(".main-menu-list > li.dropdown"); var $subMenu = $(".main-menu-list a + .sub-menu"); $dropdownLink.on('click', function (e) { $subMenu.toggle(); e.stopPropagation(); }); $(document).click(function (event) { if ($(event.target).closest($dropdownLink).get(0) == null) { $subMenu.hide(); } }); }; var initUserMenu = function () { var $link = $("#user-menu-switcher"); var $userMenu = $('.user-menu'); $link.on('click', function (e) { $userMenu.toggle(); }); $(document).click(function (event) { if ($(event.target).closest($link).get(0) == null) { $userMenu.hide(); } }); }; var initAccordion = function () { var acc = document.getElementsByClassName("accordion-btn"); var i; for (i = 0; i < acc.length; i++) { acc[i].onclick = function () { this.classList.toggle("active"); this.nextElementSibling.classList.toggle("show"); } } }; var dst = window.dst || {}; dst.utils = dst.utils || {}; dst.utils = {
    extend: function (child, parent) { var F = function () { }; F.prototype = parent.prototype; child.prototype = new F(); child.prototype.constructor = child; child.superclass = parent.prototype; }, callFunc: function (callback, data = null) { if (dst.utils.getNullableFunc(callback)) { return callback(data); } else { return null; } }, getNullableFunc: function (func) { return (typeof (func) === "function") ? func : null; }, sendPostData: function (path, parameters) { var form = $('<form></form>'); form.attr("method", "post"); form.attr("action", path); $.each(parameters, function (key, value) { var field = $('<input></input>'); field.attr("type", "hidden"); field.attr("name", key); field.attr("value", value); form.append(field); }); $(document.body).append(form); form.submit(); }, changeBrowserUrl: function (urlPath) { window.history.pushState({}, "", urlPath); }, createSiteUrl: function (urlParts) { return BaseUrl + urlParts.join('/'); }, getQueryString: function () {
        var queryString = {}; var query = window.location.search.substring(1); var vars = query.split("&"); for (var i = 0; i < vars.length; i++) { var pair = vars[i].split("="); if (typeof queryString[pair[0]] === "undefined") { queryString[pair[0]] = decodeURIComponent(pair[1]); } else if (typeof queryString[pair[0]] === "string") { var arr = [queryString[pair[0]], decodeURIComponent(pair[1])]; queryString[pair[0]] = arr; } else { queryString[pair[0]].push(decodeURIComponent(pair[1])); } }
        return queryString;
    }, getFormData: function (formId) {
        var formData = $("#" + formId).serializeArray(); var data = {}; for (var i = 0; i < formData.length; i++) { if (formData[i].value) { data[formData[i].name] = formData[i].value; } }
        return data;
    }, resetForm: function (formId) { $("#" + formId).find("input[type=text], select, textarea").val(""); }, isFormValidated: function (formElement) { return $(formElement).parsley().validate() }
}; var dst = window.dst || {}; dst.gui = dst.gui || {}; dst.gui.utils = dst.gui.utils || {}; dst.gui.utils.wait = function (container, show, showBackground) { var animationContent = ['<div class="loader">', '   <div class="loader-animation-wrapper">', '       <div class="bar"></div>', '       <div class="bar"></div>', '       <div class="bar"></div>', '       <div class="bar"></div>', '       <div class="bar"></div>', '       <div class="bar"></div>', '   </div>', '</div>'].join(""); wait(animationContent, container, show, showBackground); }; dst.gui.utils.waitPreparingReport = function (container, show, showBackground) { var animationContent = ['<div class="loader loader-report">', '   <div class="loader-animation-wrapper">', '       <img src="' + BaseUrl + '/public/images/property/report-illustration.png"/>', '       <p>PLEASE WAIT WHILE WE PREPARE YOUR PROPERTEASE REPORT</p>', '       <div class="bars-wrapper">', '           <div class="bar"></div>', '           <div class="bar"></div>', '           <div class="bar"></div>', '           <div class="bar"></div>', '           <div class="bar"></div>', '           <div class="bar"></div>', '       </div>', '   </div>', '</div>'].join(""); wait(animationContent, container, show, showBackground); }; dst.gui.utils.waitPreparingPdfReport = function (container, show, showBackground) { var animationContent = ['<div class="loader loader-report">', '   <div class="loader-animation-wrapper">', '       <img src="' + BaseUrl + '/public/images/property/report-illustration.png"/>', '       <p>GENERATING YOUR PDF REPORT</p>', '       <p>NOTE: IT CAN TAKE UP TO 30 SECONDS</p>', '       <div class="bars-wrapper">', '           <div class="bar"></div>', '           <div class="bar"></div>', '           <div class="bar"></div>', '           <div class="bar"></div>', '           <div class="bar"></div>', '           <div class="bar"></div>', '       </div>', '   </div>', '</div>'].join(""); wait(animationContent, container, show, showBackground); }; function wait(animationContent, container, show, showBackground) {
    if (!container)
        throw new Error("Container for wait animation is undefined"); var loader = $(container + " > .loader")
    var backgroundClass = "loading"; if (show) { if (!loader.length) { if (showBackground) { $(container).addClass(backgroundClass).append(animationContent); } else { $(container).append(animationContent); } } } else { setTimeout(function () { $(container).removeClass(backgroundClass); loader.remove(); }, 300) }
}
dst.gui.utils.modal = {
    modal: function (options) {
        options.showFooter = options.showFooter === undefined ? true : options.showFooter; var body = $('body'); var instance = { close: function () { thisModal.remove(); thisModal.attr('class', 'modal'); body.removeClass('modal-open'); }, setTitle: function () { thisModal.find(".modal-title").text(options.title); }, addButton: function (button) { thisModal.find(".modal-footer").append(button); }, toggleClass: function (className, enable = true) { thisModal.toggleClass(className, enable); } }
        var modalId = "modal_" + options.id; var thisModal = $("#" + modalId); var buttons = { cancelButton: { className: 'btn-cancel' }, saveButton: { className: 'btn-save', }, okButton: { className: 'btn-ok' }, closeButton: { className: 'btn-close btn-only-icon' } }; function createBtn(className) { return '<button type="button"  class="btn ' + className + '"></button>' }
        function footer() { return ['<div class="modal-footer">', options.cancelBtn === true ? createBtn(buttons.cancelButton.className) : "", options.saveBtn === true ? createBtn(buttons.saveButton.className) : "", options.okBtn === true ? createBtn(buttons.okButton.className) : "", '</div>'].join(""); }
        if (!thisModal.length) { thisModal = $(['<div class="modal ' + options.modalClass + '" id="' + modalId + '">', '<div class="modal-dialog" role="document">', '<div class="modal-content">', '<div class="modal-header">', options.showFooter == false ? createBtn(buttons.closeButton.className) : "", '<h4 class="modal-title">', '<img src="' + BaseUrl + '/public/images/logo.png" alt="">', '<div><span>' + options.title + '</span></div>', '</h4>', '</div>', '<div class="modal-body">', options.message, '</div>', options.showFooter ? footer() : "", '</div>', '</div>', '</div>'].join('')); } else { instance.setTitle(); }
        body.append(thisModal); thisModal.addClass('modal-open'); body.addClass('modal-open'); thisModal.show(); if (options.cancelBtn) {
            var cancelBtn = thisModal.find('.' + buttons.cancelButton.className); cancelBtn.on('click', function () {
                if (options.cancelCallback) { options.cancelCallback(); }
                instance.close();
            });
        }
        if (options.saveBtn) { var saveBtn = thisModal.find('.' + buttons.saveButton.className); saveBtn.on('click', function () { if (options.saveCallback) { dst.utils.callFunc(options.saveCallback, instance) } else { instance.close(); } }); }
        if (options.okBtn) {
            var okBtn = thisModal.find('.' + buttons.okButton.className); okBtn.on('click', function () {
                if (options.okCallback) { options.okCallback(); }
                instance.close();
            });
        }
        if (!options.showFooter) {
            var closeBtn = thisModal.find('.btn-close'); closeBtn.on('click', function () {
                if (options.closeCallback) { options.closeCallback(); }
                instance.close();
            });
        }
        return instance;
    }, alert: function (title, message, okCallback) { return dst.gui.utils.modal.modal({ title: title || '', message: message, modalClass: 'modal-alert', id: 'modal-alert_' + Date.now(), okBtn: true, okCallback: function () { if (okCallback) { okCallback(); } }, }) }, confirm: function (options) { return dst.gui.utils.modal.modal({ title: options.title || '', message: options.message, modalClass: 'modal-confirm', id: 'modal-confirm_' + Date.now(), okBtn: true, okCallback: function () { if (options.okCallback) { options.okCallback(); } }, cancelBtn: true, cancelCallback: function () { if (options.cancelCallback) { options.cancelCallback(); } } }) }, info: function (title, content, closeCallback) { return dst.gui.utils.modal.modal({ title: title || '', message: content, closeCallback: function () { dst.utils.callFunc(closeCallback); }, modalClass: 'modal-alert modal-info', id: 'modal-info_' + Date.now(), showFooter: false }) }
}; var dst = window.dst || {}; dst.services = dst.services || {}; dst.services.getFormData = function (formObject) {
    if (!formObject) { throw new Error("Form obj is not defiened"); }
    var formData = formObject.serializeArray(); var data = {}; if (formData) { for (var i = 0; i < formData.length; i++) { data[formData[i].name] = formData[i].value; } }
    return data;
}
dst.services.getGuid = function () { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) { var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); }); }, dst.services.renderTemplate = function (templete, data, callback) { var url = BaseUrl + 'public/templates/' + templete + ".html" + (window.Version ? "?v=" + window.Version : ""); $.get(url, function (html) { var content = Mustache.render(html, data); dst.utils.callFunc(callback, content); }); }
dst.services.DataService = function () {
    if (!window.dst.utils) { alert("The utils library is required"); return; }
    var self = this; this.getData = function (url, data, callback, async, startCallback, endCallback) { request(url, "GET", data, callback, async, startCallback, endCallback); }; this.postData = function (url, data, callback, async, startCallback, endCallback) { request(url, "POST", data, callback, async, startCallback, endCallback); }; function request(url, method, data, callback, async, startCallback, endCallback) { $.ajax({ type: method, url: url, data: (data ? data : ""), async: async == undefined ? true : async, dataType: "json", success: function (result, textResponce, httpResponse) { var res = result; dst.utils.callFunc(callback, { result: res, response: httpResponse }); }, error: function (err) { console.log("Ajax Error"); console.log(err); dst.utils.callFunc(callback, null); }, beforeSend: function (xhr) { dst.utils.callFunc(startCallback, xhr); } }).fail(function (err) { console.log("Ajax Fail"); console.log(err); }).always(function () { dst.utils.callFunc(endCallback); }); }
}; dst.services.streetView = new function () {
    var streetView; var geocoder; var isOpen = false; var self = {
        show: function (address) {
            if (!isOpen) {
                if (!address)
                    throw new Error("Address for street view is undefined"); geocoder = new google.maps.Geocoder(); geocoder.geocode({ 'address': address }, function (results, status) { if (status === google.maps.GeocoderStatus.OK) { var content = ["<div id='street-view-wrapper' class='street-view-wrapper'>", "<img id='close-street-window' class='close-street-window' src='" + BaseUrl + "/public/images/close-icon.png'>", "<div id='street-view' class='street-view'></div>", "</div>"]; $('body').append(content.join("")); streetView = new google.maps.StreetViewPanorama(document.getElementById('street-view'), { position: { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng() }, }); isOpen = true; $("#close-street-window").on("click", function () { $("#street-view-wrapper").remove(); isOpen = false; }); } else { alert('Geocode was not successful for the following reason: ' + status); } });
            }
        }, remove: function () { $("#street-view-wrapper").remove(); isOpen = false; }
    }; return self;
}; $(document).ready(function () {
    (function () {
        var dataService; var formChangeEmail = '#formChangeEmail'; var initialize = function () {
            dataService = new dst.services.DataService(); var popUpIsOpened = false; $('body').on('click', '.js-login-link', function (e) { e.preventDefault(); openPopUp('#login-form'); }); $('.js-forgot-pass-link').click(function (e) { e.preventDefault(); openPopUp('#password-recovery'); }); $(document).on('click', '.js-resend-activation-email-link', function (e) { e.preventDefault(); openPopUp('#resend-email-activation'); }); $('#popup-background').click(closePopups.bind(null, true))
            $('#logIn').click(function (e) { validateDataAndLogIn(e); }); $('.btn-logIn').click(function (e) { e.preventDefault(); openPopUp('#login-form'); }); $('#btnSubmitNewEmail').on('click', function (e) { e.preventDefault(); changeEmail(); }); if (window.isOpenLoginPopupWindow) { openPopUp('#login-form'); }
        }
        var openPopUp = function (id) {
            closePopups(false); $('body').addClass('popup-opened'); if ($('body').find('.modal').length > 0) { $('body').find('.modal').fadeOut(300); }
            $('#popup-background').fadeIn(300); $(id).fadeIn(300); popUpIsOpened = true; $(document).keyup(function (event) { if (popUpIsOpened && (event.keyCode == 13)) { validateDataAndLogIn(event); } })
            return false;
        }
        var closePopups = function (shadow) {
            $('.popup-form').fadeOut(300); $('body').removeClass('popup-opened'); if (shadow) { $('#popup-background').fadeOut(300); }
            popUpIsOpened = false; return false;
        }
        var logIn = function () {
            var loginFormData = $('#loginForm').serializeArray(); var userData = {}; for (var i = 0; i < loginFormData.length; i++) { userData[loginFormData[i].name] = loginFormData[i].value; }
            dst.gui.utils.wait('body', true, true); dataService.postData(BaseUrl + 'account/login', userData, function (data) {
                if (data && data.result) { var result = data.result; if (result.succeeded) { window.location = BaseUrl + result.url; } else { $('.login-error-message').empty(); $('.login-error-message').append(result.error); } }
                dst.gui.utils.wait('body', false, false);
            });
        }
        var validateDataAndLogIn = function (event) { event.preventDefault(); if ($('#loginForm').parsley().validate()) { logIn(); } }
        var changeEmail = function () {
            if (dst.utils.isFormValidated(formChangeEmail)) {
                var actionUri = $(formChangeEmail).attr('action'); dst.gui.utils.wait('body', true, true); var newEmailField = $('#fieldNewEmail'); dataService.postData(actionUri, { new_email: newEmailField.val() }, function (data) {
                    if (data && data.result) {
                        var result = data.result; var title = 'Congratulations'; var message = "We’re almost done. Please check your new email and confirm your new email address."; if (!result.succeeded) { title = 'Error'; message = result.error; }
                        newEmailField.val(''); dst.gui.utils.modal.alert(title, message);
                    }
                    dst.gui.utils.wait('body', false, false);
                });
            }
        }
        initialize();
    })();
}); var dst = window.dst || {}; dst.services = dst.services || {}; dst.services.GoogleAutocomplete = function (containerId, options) {
    var dataService; var autocompleteService; var geocoder; var globalCounter = 0; var SearchTextInputId = "search-input"; var SuggestionsListId = "suggestion-list"; var ListWrapperId = "search-result-list"; var ListBoxId = "list-box"; var SearchResultItemClass = "search-result-item"; var LoadingClassName = "loading"; var ItemHeight = 28; var self = this; var lastSentRequestId = 0; var keyPressTimerId; var scrollTimerId; var displayedElementCount = 50; var totalElementCount; var firstElementNumber = 0; var lastElementNumber = displayedElementCount; var suggestionListPosition = 0; var resultSelected = false; var cachedData = []; function timeoutRequest() { clearTimeout(keyPressTimerId); keyPressTimerId = setTimeout(function () { sendRequest(); }, 600); }
    function sendRequest() { var searchText = getSearchText(); if (searchText) { dst.gui.utils.wait("#" + containerId, true, true); lastSentRequestId = getData(searchText, function (result) { if (result) { setListBoxHeight(); clearList(); updateList(rendererSuggectionsList(result)); setTopOffsetForSuggestionList(); $("#" + ListWrapperId).fadeIn(); dst.gui.utils.wait("#" + containerId, false, false); } }); } else { resetList(); } }
    function getData(data, callbackFunc) {
        options.input = data; autocompleteService.getPlacePredictions(options, function (predictions, status) {
            if (status != google.maps.places.PlacesServiceStatus.OK) { predictions = []; }
            dst.utils.callFunc(callbackFunc, predictions);
        })
    }
    function rendererSuggectionsList(data) {
        cachedData = []; var content = []; if (data.length > 0) { for (var i = 0; i < data.length; i++) { content.push("<li class='search-result-item' data-id=" + globalCounter + "><span>" + data[i].description + "</span></li>"); cachedData[globalCounter] = data[i]; globalCounter++; } } else { content.push("<li class='search-result-item no-mathes-item'><span>No matches found</span></li>"); }
        return content.join("");
    }
    function clearList() { $("#" + SuggestionsListId).empty(); }
    function updateList(content) { $("#" + SuggestionsListId).append(content); $("#" + containerId).removeClass(LoadingClassName); }
    function getSearchText() { return $("#" + SearchTextInputId).val(); }
    function setListBoxHeight() { $("#" + ListBoxId).css({ height: totalElementCount * ItemHeight }); }
    function setTopOffsetForSuggestionList() { $("#" + SuggestionsListId).css({ top: suggestionListPosition }); }
    function hideList() { $("#" + ListWrapperId).fadeOut(); }
    function resetList() { clearTimeout(scrollTimerId); clearTimeout(keyPressTimerId); hideList(); suggestionListPosition = 0; setTopOffsetForSuggestionList(); clearList(); totalElementCount = 0; setListBoxHeight(); firstElementNumber = 0; lastElementNumber = 50; clearTimeout(scrollTimerId); clearTimeout(keyPressTimerId); }
    function getAddressComponents(addressObj) {
        var addrObj = {}; jQuery.each(addressObj.address_components, function (k, v1) { jQuery.each(v1.types, function (k2, v2) { addrObj[v2] = v1.long_name; addrObj[v2 + "_short"] = v1.short_name; }); })
        var streetAddress = null; if (addrObj.street_number && addrObj.route) { streetAddress = addrObj.street_number + " " + addrObj.route; }
        var addressGeoPoint = null; if (addressObj.geometry && addressObj.geometry.location) { addressGeoPoint = addressObj.geometry.location.toJSON(); }
        var viewPort = null; if (addressObj.geometry && addressObj.geometry.viewport) { viewPort = addressObj.geometry.viewport.toJSON(); }
        var addrComp = { street: addrObj.route || "", streetNumber: addrObj.street_number || "", streetAddress: streetAddress, county: addrObj.locality || addrObj.sublocality || addrObj.administrative_area_level_3, city: (addrObj.administrative_area_level_2 || ""), state: addrObj.administrative_area_level_1 || "", stateShort: addrObj.administrative_area_level_1_short || "", country: addrObj.country || "", zip: addrObj.postal_code, location: addressGeoPoint, bounds: viewPort }; return addrComp;
    }
    function init() {
        autocompleteService = new google.maps.places.AutocompleteService(); geocoder = new google.maps.Geocoder(); var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-28.40348080236271, 152.28424072265628), new google.maps.LatLng(-26.086388149394864, 157.55767822265628)); options = options || { bounds: defaultBounds, componentRestrictions: { country: "au" }, types: ['geocode'] }; dataService = new dst.services.DataService(); var controlHtmlContent = ["<div id='search-result-list'" + " style='display: none' >", "<div id='list-box'></div>", "<ul id='suggestion-list'></ul>", "</div>",]; $("#" + containerId).after(controlHtmlContent.join("")); var autocompletInput = $("#" + SearchTextInputId); autocompletInput.keyup(function (e) { resultSelected = false; if (e.keyCode === 8 || e.keyCode == 46) { resetList(); if (getSearchText()) { timeoutRequest(); } } }); autocompletInput.keypress(function (e) { resetList(); resultSelected = false; timeoutRequest() }); autocompletInput.bind("paste", function (e) { timeoutRequest(); }); $("#" + ListWrapperId).on("click", function (e) { console.log(e); return false; }); $("#" + SearchTextInputId).on("click", function () { return false; }); $(document).on("click", function () { resultSelected = true; lastSentRequestId = null; resetList(); }); $("#" + SuggestionsListId).on("click", "." + SearchResultItemClass, function (e) {
            var itemId = $(this).attr("data-id"); var item = cachedData[itemId]; $("#" + SearchTextInputId).val(item.description); geocoder.geocode({ 'address': item.description }, function (results, status) {
                var geocodeResult = null; if (status == 'OK') { geocodeResult = results[0]; }
                dst.utils.callFunc(self.onPlaceChanged, getAddressComponents(geocodeResult));
            }); resetList(); return false;
        });
    }
    init(); this.onPlaceChanged = function () { throw new Error('Not implemented yet'); };
}; $(document).ready(function () { var autocomplete = new dst.services.GoogleAutocomplete('search-input'); autocomplete.onPlaceChanged = function (place) { dst.utils.sendPostData(BaseUrl + 'map/index', { place: JSON.stringify(place) }); }; });